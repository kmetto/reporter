{"version":3,"sources":["ng://ngx-ssrs-reportviewer/lib/reportviewer.component.ts","ng://ngx-ssrs-reportviewer/lib/reportviewer.module.ts"],"names":["ReportViewerComponent","sanitizer","this","showparameters","language","width","height","toolbar","onError","EventEmitter","prototype","ngOnChanges","changes","reporturl","emit","source","bypassSecurityTrustResourceUrl","buildReportUrl","buildParameterString","parameterString","param","parameters","Array","arrayParam","reportserver","Component","args","selector","template","encapsulation","ViewEncapsulation","ShadowDom","DomSanitizer","Input","Output","ReportViewerModule","injector","reportviewerElement","createCustomElement","customElements","define","NgModule","declarations","imports","CommonModule","entryComponents","Injector"],"mappings":"4eAAA,IAAAA,EAAA,WAgDE,SAAAA,EAAoBC,GAAAC,KAAAD,UAAAA,EAbpBC,KAAAC,eAA0B,QAI1BD,KAAAE,SAAoB,QAEpBF,KAAAG,MAAiB,IAEjBH,KAAAI,OAAkB,IAElBJ,KAAAK,QAAmB,OAEFL,KAAAM,QAAU,IAAIC,EAAAA,aAoDjC,OA9CET,EAAAU,UAAAC,YAAA,SAAYC,GACNV,KAAKW,WACPX,KAAKM,QAAQM,KAAK,sBAGhB,cAAeF,IACjBV,KAAKa,OAASb,KAAKD,UAClBe,+BAA+Bd,KAAKe,oBAIlCjB,EAAAU,UAAAQ,qBAAP,eAEMC,EAAkB,GAEtB,IAAK,IAAIC,KAASlB,KAAKmB,WACrB,GAAID,EAAO,CACT,GAAIlB,KAAKmB,WAAWD,aAAkBE,QAAU,EAC9C,IAAK,IAAIC,KAAcrB,KAAKmB,WAAWD,GACjCG,IACFJ,GAAmB,IAAMC,EAAQ,IAAMlB,KAAKmB,WAAWD,GAAOG,IAItC,MAA1BrB,KAAKmB,WAAWD,IAAkBlB,KAAKmB,WAAWD,aAAkBE,QAAU,IAChFH,GAAmB,IAAMC,EAAQ,IAAMlB,KAAKmB,WAAWD,IAE3B,MAA1BlB,KAAKmB,WAAWD,KAClBD,GAAmB,IAAMC,EAAQ,gBAIvC,OAAOD,GAGFnB,EAAAU,UAAAO,eAAP,WACE,GAAKf,KAAKW,UAAV,KAGIQ,EAAanB,KAAKgB,uBACtB,OAAOhB,KAAKsB,aAAe,KACvBtB,KAAKW,UAAY,gCACGX,KAAKC,eACzBkB,EACA,yBAA2BnB,KAAKE,SAAW,eAAiBF,KAAKK,8BA9FxEkB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAU,wGAqBVC,cAAeC,EAAAA,kBAAkBC,kBAhBxB,gSATFC,EAAAA,mDA6BNC,EAAAA,4BAEAA,EAAAA,8BAEAA,EAAAA,0BAEAA,EAAAA,wBAEAA,EAAAA,qBAEAA,EAAAA,sBAEAA,EAAAA,uBAEAA,EAAAA,uBAGAC,EAAAA,OAAMR,KAAA,CAAC,YAoDV1B,EAnGA,GCAAmC,EAAA,WAWE,SAAAA,EAAoBC,GAAAlC,KAAAkC,SAAAA,MACZC,EAAsBC,EAAAA,oBAAoBtC,EAAuB,CAAEoC,SAAQA,IACjFG,eAAeC,OAAO,oBAAqBH,GAE9C,2BAVAI,EAAAA,SAAQf,KAAA,CAAC,CACRgB,aAAc,CAAC1C,GACf2C,QAAS,CAACC,EAAAA,cACVC,gBAAiB,CAAC7C,gDARD8C,EAAAA,YAelBX,EAfD","sourcesContent":["import { Component, OnChanges, Input, Output, EventEmitter, SimpleChanges, ViewEncapsulation  } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ssrs-reportviewer',\n  template: `\n  <div class=\"iframe-container\">\n    <iframe [src]=\"source\" scrolling=\"no\"></iframe>\n  </div>\n  `,\n  styles: [`\n  \n  .iframe-container iframe {\n     border: 0;\n     height: 100%;\n     left: 0;\n     position: absolute;\n     top: 0;\n     width: 100%;\n  }\n  \n  /* 4x3 Aspect Ratio */\n  .iframe-container-4x3 {\n    padding-top: 75%;\n  }\n  `],\n  encapsulation: ViewEncapsulation.ShadowDom\n})\nexport class ReportViewerComponent implements OnChanges {\n\n  @Input()\n  reporturl: string;\n  @Input()\n  reportserver: string;\n  @Input()\n  showparameters?: string = \"false\";\n  @Input()\n  parameters?: any;\n  @Input()\n  language?: string = \"en-us\";\n  @Input()\n  width?: number = 100;\n  @Input()\n  height?: number = 100;\n  @Input()\n  toolbar?: string = \"true\";\n\n  @Output('error') onError = new EventEmitter<any>();\n  constructor(private sanitizer: DomSanitizer) { }\n\n\n  source: SafeResourceUrl;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(!this.reporturl){\n      this.onError.emit(\"Src cannot be null\");\n    }\n\n    if ('reporturl' in changes) {\n      this.source = this.sanitizer\n      .bypassSecurityTrustResourceUrl(this.buildReportUrl());\n    }\n  }\n\n  public buildParameterString(): string {\n\n    var parameterString = \"\";\n\n    for (var param in this.parameters) {\n      if (param) {\n        if (this.parameters[param] instanceof Array === true) {\n          for (var arrayParam in this.parameters[param]) {\n            if (arrayParam) {\n              parameterString += \"&\" + param + \"=\" + this.parameters[param][arrayParam];\n            }\n          }\n        }\n        if (this.parameters[param] != null && this.parameters[param] instanceof Array === false) {\n          parameterString += \"&\" + param + \"=\" + this.parameters[param];\n        }\n        if (this.parameters[param] == null) {\n          parameterString += \"&\" + param + \":isnull=true\";\n        }\n      }\n    }\n    return parameterString;\n  }\n\n  public buildReportUrl() : string {\n    if (!this.reporturl) {\n      return;\n    }\n    var parameters = this.buildParameterString();\n    return this.reportserver + '?/'\n      + this.reporturl + '&rs:Embed=true'\n      + '&rc:Parameters=' + this.showparameters\n      + parameters\n      + '&rs:ParameterLanguage=' + this.language + \"&rc:Toolbar=\" + this.toolbar; \n  }\n}\n","import { NgModule, Injector } from '@angular/core';\nimport { ReportViewerComponent } from './reportviewer.component';\nimport { createCustomElement } from '@angular/elements';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ReportViewerComponent],\n  imports: [CommonModule],\n  entryComponents: [ReportViewerComponent]\n})\nexport class ReportViewerModule {\n  constructor(private injector: Injector) {\n    const reportviewerElement = createCustomElement(ReportViewerComponent, { injector });\n    customElements.define('ssrs-reportviewer', reportviewerElement);\n  }\n }\n"]}